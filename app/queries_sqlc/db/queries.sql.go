// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo (uuid, title, description, done, board_uuid)
VALUES ($1, $2, $3, $4, $5)
RETURNING uuid, title, description, done, board_uuid
`

type CreateTodoParams struct {
	Uuid        uuid.UUID
	Title       string
	Description sql.NullString
	Done        bool
	BoardUuid   uuid.NullUUID
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.Uuid,
		arg.Title,
		arg.Description,
		arg.Done,
		arg.BoardUuid,
	)
	var i Todo
	err := row.Scan(
		&i.Uuid,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.BoardUuid,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todo
WHERE uuid = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, argUuid)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT uuid, title, description, done, board_uuid
FROM todo
WHERE uuid = $1
`

func (q *Queries) GetTodo(ctx context.Context, argUuid uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, argUuid)
	var i Todo
	err := row.Scan(
		&i.Uuid,
		&i.Title,
		&i.Description,
		&i.Done,
		&i.BoardUuid,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT uuid, title, description, done, board_uuid
FROM todo
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.Uuid,
			&i.Title,
			&i.Description,
			&i.Done,
			&i.BoardUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todo
SET title = $2, description = $3, done = $4, board_uuid = $5
WHERE uuid = $1
`

type UpdateTodoParams struct {
	Uuid        uuid.UUID
	Title       string
	Description sql.NullString
	Done        bool
	BoardUuid   uuid.NullUUID
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo,
		arg.Uuid,
		arg.Title,
		arg.Description,
		arg.Done,
		arg.BoardUuid,
	)
	return err
}
